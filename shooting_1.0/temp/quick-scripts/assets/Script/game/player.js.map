{"version":3,"sources":["player.js"],"names":["Global","require","cc","Class","extends","Component","properties","count","bulletPrefab","default","type","Prefab","blastPrefab","onCollisionEnter","other","self","console","log","node","name","gameData","pack","parent","removeChild","schedule","game","gameEnd","bulletObjGroup","bulletPool","NodePool","initCount","i","bullet","instantiate","put","createBullet","parentNode","key","_x","getPosition","x","_y","y","height","size","get","setPosition","datakey","blastObjGroup","blastPool","block","onLoad","start","update","dt","over","level"],"mappings":"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","file":"player.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\game","sourcesContent":["const Global = require(\"Global\")\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 子弹帧数计数\r\n        count: 0,\r\n        // 子弹资源\r\n        bulletPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n        // 生成的粒子资源\r\n        blastPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n    },\r\n\r\n    // 碰撞检测\r\n    onCollisionEnter(other, self) {\r\n        console.log('飞机撞到的物体：',other.node.name);\r\n        if (other.node.name == 'prop') {\r\n            Global.gameData.pack = true;\r\n            other.node.parent.removeChild(other.node);\r\n            this.schedule(() => {\r\n                Global.gameData.pack = false;\r\n            }, 5, 0);\r\n        } else {\r\n            Global.game.gameEnd();\r\n        }\r\n    },\r\n    // 子弹对象池\r\n    bulletObjGroup() {\r\n        // 储存到 Global 里面\r\n        Global.gameData.bulletPool = new cc.NodePool();\r\n        let initCount = 20;\r\n        for (let i = 0; i < initCount; ++i) {\r\n            // 创建节点\r\n            let bullet = cc.instantiate(this.bulletPrefab);\r\n            // 通过 putInPool 接口放入对象池\r\n            Global.gameData.bulletPool.put(bullet);\r\n        }\r\n    },\r\n    /** \r\n     * 创建子弹\r\n     * key: 2 为直线射击 1 & 3 则左右两边倾斜射击\r\n    */\r\n    createBullet(parentNode, key = 2) {\r\n        let bullet = null,\r\n            _x = this.node.getPosition().x,\r\n            _y = this.node.getPosition().y + this.node.height / 4;\r\n        // 通过 size 接口判断对象池中是否有空闲的对象\r\n        if (Global.gameData.bulletPool.size() > 0) {\r\n            bullet = Global.gameData.bulletPool.get();\r\n        } else {\r\n            // 如果没有空闲对象，也就是对象池中备用对象不够时，我们就用 cc.instantiate 重新创建\r\n            bullet = cc.instantiate(this.bulletPrefab);\r\n        }\r\n        bullet.setPosition(_x, _y);\r\n        // 将生成的敌人加入节点树\r\n        bullet.parent = parentNode;\r\n        // 设置key标记\r\n        bullet.datakey = key\r\n        // cc.log(bullet.datakey)\r\n    },\r\n    // 创建粒子对象池\r\n    blastObjGroup() {\r\n        Global.gameData.blastPool = new cc.NodePool();\r\n        let initCount = 50;\r\n        for (let i = 0; i < initCount; ++i) {\r\n            let block = cc.instantiate(this.blastPrefab);\r\n            Global.gameData.blastPool.put(block);\r\n        }\r\n        // cc.log('执行粒子创建')\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // 创建子弹对象池\r\n        this.bulletObjGroup();\r\n        // 创建粒子对象池\r\n        // this.blastObjGroup();\r\n    },\r\n\r\n    start () {\r\n        // this.getComponent('player')\r\n    },\r\n\r\n    update (dt) {\r\n        if (Global.gameData.over) return;\r\n        this.count += 1;\r\n        if (this.count % 10 == 0) {\r\n            // 检查获取道具包\r\n            if (Global.gameData.pack) {\r\n                for (let i = 1; i <= 3; i++) {\r\n                    this.createBullet(Global.game.node, i);\r\n                }\r\n            } else {\r\n                this.createBullet(Global.game.node);\r\n            }\r\n            // 难度叠加\r\n            if (this.count >= 1000) {\r\n                this.count = 0;\r\n                Global.gameData.level = Global.gameData.level == 3 ? 3 : Global.gameData.level += 1;\r\n                console.log('难度系数：', Global.gameData.level);\r\n            }\r\n        }\r\n    },\r\n});\r\n"]}
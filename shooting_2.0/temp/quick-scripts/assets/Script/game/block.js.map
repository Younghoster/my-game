{"version":3,"sources":["block.js"],"names":["Global","require","cc","Class","extends","Component","properties","blastPrefab","default","type","Prefab","createBlast","blast","gameData","blastPool","size","get","log","instantiate","setPosition","node","x","width","y","height","parent","game","blockBox","onCollisionEnter","other","self","name","score","Number","getChildByName","getComponent","Label","string","blockPool","put","key","parseInt","color","Color","colors","dataxspeed","onLoad","start","update","dt"],"mappings":"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","file":"block.js","sourceRoot":"..\\..\\..\\..\\..\\assets\\Script\\game","sourcesContent":["const Global = require(\"Global\")\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // 生成的粒子资源\r\n        blastPrefab: {\r\n            default: null,\r\n            type: cc.Prefab\r\n        },\r\n    },\r\n    // 生成一个爆炸粒子\r\n    createBlast() {\r\n        let blast = null;\r\n        if (Global.gameData.blastPool.size() > 0) {\r\n            blast = Global.gameData.blastPool.get();\r\n        } else {\r\n            cc.log('创建新粒子')\r\n            blast = cc.instantiate(this.blastPrefab);\r\n        }\r\n        // cc.log(this.node.x, this.node.y)\r\n        blast.setPosition(this.node.x + this.node.width / 2, this.node.y - this.node.height / 2);\r\n        blast.parent = Global.game.blockBox;\r\n    },\r\n    // 碰撞检测\r\n    onCollisionEnter(other, self) {\r\n        // 子弹碰撞\r\n        if (other.node.name == 'bullet') {\r\n            let score = Number(this.node.getChildByName('boxtext').getComponent(cc.Label).string);\r\n            if (score == 1) {\r\n                // this.createBlast()\r\n\r\n                /**\r\n                 * Auto Remove On 勾上\r\n                 * Play On Load 勾上\r\n                */\r\n                let blast = cc.instantiate(this.blastPrefab);\r\n                blast.setPosition(this.node.x + this.node.width / 2, this.node.y - this.node.height / 2);\r\n                blast.parent = Global.game.blockBox;\r\n\r\n                Global.gameData.blockPool.put(this.node)\r\n            } else {\r\n                this.node.getChildByName('boxtext').getComponent(cc.Label).string = score - 1;\r\n                // 改变颜色\r\n                let key = parseInt(score / 10) > 5 ? 5 : parseInt(score / 10);\r\n                this.node.color = new cc.Color(Global.gameData.colors[key]);\r\n            }\r\n        }\r\n        // 碰撞到墙，反弹\r\n        if (other.node.name == 'wall') {\r\n            this.node.dataxspeed = -this.node.dataxspeed\r\n        }\r\n\r\n    },\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad () {\r\n        // let _w = this.node.width\r\n        // // 设置碰撞包围（大小变动的时候包围不会自动跟随 即 只会执行一次，再次从对象池里面拿出来就不执行了）\r\n        // this.node.getComponent(cc.BoxCollider).size.width = this.node.getComponent(cc.BoxCollider).size.height = _w;\r\n        // this.node.getComponent(cc.BoxCollider).offset.x = _w / 2;\r\n        // this.node.getComponent(cc.BoxCollider).offset.y = -_w / 2;\r\n    },\r\n\r\n    start () {\r\n\r\n    },\r\n\r\n    update (dt) {\r\n        if (this.node.y <= 0.01) {\r\n            Global.gameData.blockPool.put(this.node)\r\n            // cc.log('方块到达底部回收')\r\n        } else {\r\n            this.node.y -= 2\r\n            this.node.x += this.node.dataxspeed\r\n        }\r\n    },\r\n});\r\n"]}